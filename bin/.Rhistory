f$ecoone = factor(f$ecoone, levels = m_column_order)
f$ecotwo = factor(f$ecotwo, levels = m_row_order)
ggplot(f, aes(x=ecoone, y=ecotwo, fill=V2))+geom_tile()+labs(x='',y='')+scale_fill_viridis(discrete=FALSE)+theme(legend.position = 'NA')+geom_text(aes(label=V2))+theme_minimal()
}
list_m = list(make_fst_heatmap('3L', 'm'),make_fst_heatmap('3R', 'm'),make_fst_heatmap('2L', 'm'),make_fst_heatmap('2R', 'm'), make_fst_heatmap('X', 'm'))
cowplot::plot_grid(plotlist = list_m, labels = c('3L', '3R', '2L', '2R', 'X'))
ggplot(f, aes(x=ecoone, y=ecotwo, fill=V2))+geom_tile()+labs(x='',y='')+scale_fill_viridis(discrete=FALSE)+theme_minimal()+theme(legend.position = 'NA')+geom_text(aes(label=V2))
make_fst_heatmap <- function(chrom, spec){
f = glob_fst[(glob_fst$form == spec & glob_fst$chr == chrom),]
f = as.data.frame(f)
f = f[c('ecoone', 'ecotwo', 'V2')]
f$ecoone = factor(f$ecoone, levels = m_column_order)
f$ecotwo = factor(f$ecotwo, levels = m_row_order)
ggplot(f, aes(x=ecoone, y=ecotwo, fill=V2))+geom_tile()+labs(x='',y='')+scale_fill_viridis(discrete=FALSE)+theme_minimal()+theme(legend.position = 'NA')+geom_text(aes(label=V2))
}
list_m = list(make_fst_heatmap('3L', 'm'),make_fst_heatmap('3R', 'm'),make_fst_heatmap('2L', 'm'),make_fst_heatmap('2R', 'm'), make_fst_heatmap('X', 'm'))
cowplot::plot_grid(plotlist = list_m, labels = c('3L', '3R', '2L', '2R', 'X'))
make_fst_heatmap('3L', 's')
list_m = list(make_fst_heatmap('3L', 's'),make_fst_heatmap('3R', 's'),make_fst_heatmap('2L', 's'),make_fst_heatmap('2R', 's'), make_fst_heatmap('X', 's'))
cowplot::plot_grid(plotlist = list_m, labels = c('3L', '3R', '2L', '2R', 'X'))
#####
#Analysis of IBD tract data
#tristan dennis 23.10.21
#####
#load our shit
#parse_pcangsd.py output
#run this in the same directory
pkg = c('tidyverse', 'geosphere', 'data.table', 'qqman' ,'cowplot', 'parallel', 'Rcpp', 'RColorBrewer', 'UpSetR', 'sparseAHC', 'moments')
#install.packages(pkg) #install packages if you need them and load
new.packages <- pkg[!(pkg %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
lapply(pkg, require, character.only = TRUE)#
#remotes::install_github("khabbazian/sparseAHC")
#set num cores
numcores = 10
#setwd
setwd('/Users/tristanpwdennis/Projects/MOVE/data/anopheles_03_21_DW/angsd-output/by_form_fullset/ibd_analysis/')
#export list of pops for fst ibd analysis
source('/Users/tristanpwdennis/Projects/MOVE/td_je_angam_2022/bin/generate_metadata.R')
metadata = prepare_metadata()
View(metadata)
sitelist = metadata %>% group_by(Form, Site.class) %>% count()
View(sitelist)
sitelist = metadata %>% group_by(Form, Agric_eco.activity) %>% count()
View(sitelist)
list_m = list(make_fst_heatmap('3L', 's'),make_fst_heatmap('3R', 's'),make_fst_heatmap('2L', 's'),make_fst_heatmap('2R', 's'), make_fst_heatmap('X', 's'))
list_s = list(make_fst_heatmap('3L', 'm'),make_fst_heatmap('3R', 'm'),make_fst_heatmap('2L', 'm'),make_fst_heatmap('2R', 'm'), make_fst_heatmap('X', 'm'))
cowplot::plot_grid(plotlist = list_s, labels = c('3L', '3R', '2L', '2R', 'X'))
windowed_fst_eco_files = list.files(pattern = '*window5step1.txt')
windowed_fst_eco_files
windowed_fst = lapply(seq_along(windowed_fst_eco_files), function(i){fread(windowed_fst_eco_files[[i]]) %>% mutate(fn=windowed_fst_eco_files[[i]])})
t = fread('s_rainforest_decid_forest_AgamP4_2Lwindow5step1.txt', select=2:3)
############
#fst
setwd('/Users/tristanpwdennis/Projects/MOVE/data/anopheles_03_21_DW/angsd-output/by_form_by_ecotype/')
###let';s start with the by form downsampling for fst
setwd('/Users/tristanpwdennis/Projects/MOVE/data/anopheles_03_21_DW/angsd-output/by_form_by_ecotype/')
thetsumfules = list.files(pattern = '*.idx.pestPG')
theta_summary = lapply(seq_along(thetsumfules), function(i){fread(thetsumfules[[i]]) %>% mutate(fn=thetsumfules[[i]])})
theta_summary = do.call(rbind,theta_summary)
View(theta_summary)
theta_summary = separate(theta_summary,col=fn, into=c('forma','gub', 'cov', 'chrgub', 'chr'), sep='_')
theta_summary$chr = gsub('.thetas.idx.pestPG', "",  theta_summary$chr)
theta_summary = theta_summary %>% mutate(Pi = tP / nSites, Theta = tW / nSites)
theta_summary$cov = ordered(theta_summary$cov, levels = c("0.5", "1", "2.5", "5", "7.5", "10", "full"))
theta_summary %>% filter(forma=='m') %>% select(chr, forma, cov, Tajima, Pi, Theta) %>% pivot_longer(cols = 4:6) %>% ggplot(aes(x=cov,y=as.numeric(name), colour=chr))+facet_wrap(~chr)+geom_bar(stat='identity')
View(theta_summary)
thetsumfules = list.files(pattern = '*windowout.pestPG')
thetawindow = lapply(seq_along(thetsumfules), function(i){fread(thetsumfules[[i]]) %>% mutate(fn=thetsumfules[[i]])})
thetawindow = rbindlist(thetawindow)
thetawindow = separate(thetawindow,col=fn, into=c('forma','gub', 'cov', 'chr'), sep='_')
thetsumfules = list.files(pattern = '*windowout.pestPG')
thetawindow = lapply(seq_along(thetsumfules), function(i){fread(thetsumfules[[i]]) %>% mutate(fn=thetsumfules[[i]])})
View(thetawindow)
thetsumfules
thetsumfules = list.files(pattern = '*windowout.pestPG')
thetawindow = lapply(seq_along(thetsumfules), function(i){fread(thetsumfules[[i]]) %>% mutate(fn=thetsumfules[[i]])})
thetawindow = rbindlist(thetawindow)
thetawindow = separate(thetawindow,col=fn, into=c('forma','gub', 'cov', 'chr'), sep='_')
thetawindow$chr = thetawindow$chr = gsub('.windowout.pestPG', "",  thetawindow$chr)
thetawindow$chr = thetawindow$forma = gsub('decid_forest', "decidforest",  thetawindow$forma)
thetawindow = thetawindow %>% mutate(Pi = tP / nSites, Theta = tW / nSites)
pkg = c('tidyverse', 'geosphere', 'data.table', 'qqman' ,'cowplot', 'parallel', 'Rcpp', 'RColorBrewer', 'UpSetR', 'sparseAHC', 'igraph')
#install.packages(pkg) #install packages if you need them and load
new.packages <- pkg[!(pkg %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
lapply(pkg, require, character.only = TRUE)#
#remotes::install_github("khabbazian/sparseAHC")
#set num cores
numcores = 10
#set wd and read our shit
setwd('~/Projects/MOVE/td_je_angam_2022/data/')
fst_by_site = read.csv('')
fst_by_site = read.csv('fst_betweensites.csv')
metadata = read.csv('../metadata/sequenced_metadata.csv')
#metadata subset to latlong
lalo = metadata[c('Site', 'long', 'Lat')]
#double join here (joins metadata to both sides of fst data (site a and site b))
fst_loc = merge(
x = merge(x=fst_by_site,
y=lalo,
by.x="site_a",
by.y="Site")[],
y=lalo,
by.x="site_b",
by.y = 'Site'
)[]
View(fst_loc)
unique(fst_loc)
s = unique(fst_loc)
#make point dist between coords
s$pointdist = distVincentyEllipsoid(fst_loc[,c('Lat.x','long.x')], fst_loc[,c('Lat.y','long.y')])
View(s)
#make point dist between coords
s$pointdist = distVincentyEllipsoid(s[,c('Lat.x','long.x')], s[,c('Lat.y','long.y')])
View(s)
#create a vector of sites/form that have N >= 8 (arbitrarily chosen)
filtsites = data.table(metadata)[, .N, by=.(Form, Site)][ N >= 5 ]
#create id list for filtering
site_filt_vec = paste0(filtsites$Site, '_', filtsites$Form)
fst_loc$ida = paste0(fst_loc$site_a, '_', fst_loc$Form)
fst_loc$idb = paste0(fst_loc$site_b, '_', fst_loc$Form)
x = subset(fst_loc, idb %in% site_filt_vec)
y = subset(x, ida %in% site_filt_vec)
t = unique(y)
ggplot(t, aes(x=pointdist, y=global_fst))+
geom_point()+
facet_wrap(~Form)
fst_loc = unique(fst_loc)
#make point dist between coords
s$pointdist = distVincentyEllipsoid(s[,c('Lat.x','long.x')], s[,c('Lat.y','long.y')])
#make point dist between coords
fst_loc$pointdist = distVincentyEllipsoid(s[,c('Lat.x','long.x')], s[,c('Lat.y','long.y')])
#create a vector of sites/form that have N >= 8 (arbitrarily chosen)
filtsites = data.table(metadata)[, .N, by=.(Form, Site)][ N >= 5 ]
#create id list for filtering
site_filt_vec = paste0(filtsites$Site, '_', filtsites$Form)
fst_loc$ida = paste0(fst_loc$site_a, '_', fst_loc$Form)
fst_loc$idb = paste0(fst_loc$site_b, '_', fst_loc$Form)
x = subset(fst_loc, idb %in% site_filt_vec)
y = subset(x, ida %in% site_filt_vec)
t = unique(y)
ggplot(t, aes(x=pointdist, y=global_fst))+
geom_point()+
facet_wrap(~Form)
View(fst_loc)
fst_loc$Form = fst_loc$form_a
#create a vector of sites/form that have N >= 8 (arbitrarily chosen)
filtsites = data.table(metadata)[, .N, by=.(Form, Site)][ N >= 5 ]
#create id list for filtering
site_filt_vec = paste0(filtsites$Site, '_', filtsites$Form)
fst_loc$ida = paste0(fst_loc$site_a, '_', fst_loc$Form)
fst_loc$idb = paste0(fst_loc$site_b, '_', fst_loc$Form)
x = subset(fst_loc, idb %in% site_filt_vec)
y = subset(x, ida %in% site_filt_vec)
t = unique(y)
ggplot(t, aes(x=pointdist, y=global_fst))+
geom_point()+
facet_wrap(~Form)
ggplot(t, aes(x=pointdist, y=weighted_fst))+
geom_point()+
facet_wrap(~Form)
#create a vector of sites/form that have N >= 8 (arbitrarily chosen)
filtsites = data.table(metadata)[, .N, by=.(Form, Site)][ N >= 5 ]
#create id list for filtering
site_filt_vec = paste0(filtsites$Site, '_', filtsites$Form)
fst_loc$ida = paste0(fst_loc$site_a, '_', fst_loc$Form)
fst_loc$idb = paste0(fst_loc$site_b, '_', fst_loc$Form)
x = subset(fst_loc, idb %in% site_filt_vec)
y = subset(x, ida %in% site_filt_vec)
t = unique(y)
ggplot(t, aes(x=pointdist, y=weighted_fst))+
geom_point()+
facet_wrap(~Form)
#create a vector of sites/form that have N >= 8 (arbitrarily chosen)
filtsites = data.table(metadata)[, .N, by=.(Form, Site)][ N >= 8 ]
#create id list for filtering
site_filt_vec = paste0(filtsites$Site, '_', filtsites$Form)
fst_loc$ida = paste0(fst_loc$site_a, '_', fst_loc$Form)
fst_loc$idb = paste0(fst_loc$site_b, '_', fst_loc$Form)
x = subset(fst_loc, idb %in% site_filt_vec)
y = subset(x, ida %in% site_filt_vec)
t = unique(y)
ggplot(t, aes(x=pointdist, y=weighted_fst))+
geom_point()+
facet_wrap(~Form)
#create a vector of sites/form that have N >= 8 (arbitrarily chosen)
filtsites = data.table(metadata)[, .N, by=.(Form, Site)][ N >= 5 ]
#create id list for filtering
site_filt_vec = paste0(filtsites$Site, '_', filtsites$Form)
fst_loc$ida = paste0(fst_loc$site_a, '_', fst_loc$Form)
fst_loc$idb = paste0(fst_loc$site_b, '_', fst_loc$Form)
x = subset(fst_loc, idb %in% site_filt_vec)
y = subset(x, ida %in% site_filt_vec)
t = unique(y)
ggplot(t, aes(x=pointdist, y=weighted_fst))+
geom_point()+
facet_wrap(~Form)
#create a vector of sites/form that have N >= 8 (arbitrarily chosen)
filtsites = data.table(metadata)[, .N, by=.(Form, Site)][ N >= 5 ]
#create id list for filtering
site_filt_vec = paste0(filtsites$Site, '_', filtsites$Form)
fst_loc$ida = paste0(fst_loc$site_a, '_', fst_loc$Form)
fst_loc$idb = paste0(fst_loc$site_b, '_', fst_loc$Form)
x = subset(fst_loc, idb %in% site_filt_vec)
y = subset(x, ida %in% site_filt_vec)
t = unique(y)
t$site_a
count(t$site_a)
t$site_a
len(t$site_a)
length(t$site_a)
length(t$site_b)
View(t)
metadata[c('Site', 'lat', 'long')]
metadata[c('Site', 'lat', 'long'),]
metadata[c('Site', 'Lat', 'long'),]
#create id list for filtering
site_filt_vec = paste0(filtsites$Site, '_', filtsites$Form)
fst_loc$ida = paste0(fst_loc$site_a, '_', fst_loc$Form)
fst_loc$idb = paste0(fst_loc$site_b, '_', fst_loc$Form)
x = as.dist(xtabs(t$weighted_fst ~ t$site_a + relframe$site_a))
x = as.dist(xtabs(t$weighted_fst ~ t$site_a + t$site_a))
x
xtabs(t$weighted_fst ~ t$site_a + t$site_a)
xtabs(t$weighted_fst ~ t$site_a + t$site_a)
xtabs(t$weighted_fst ~ t$site_a + t$site_a)
t %>% pivot_wider(names_from = site_b, values_from = weighted_fst)
t %>% select(site_a, site_b, weighted_fst) %>%  pivot_wider(names_from = site_b, values_from = weighted_fst)
View(fst_loc)
pkg = c('tidyverse', 'geosphere', 'data.table', 'qqman' ,'cowplot', 'parallel', 'Rcpp', 'RColorBrewer', 'UpSetR', 'sparseAHC', 'igraph')
#install.packages(pkg) #install packages if you need them and load
new.packages <- pkg[!(pkg %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
lapply(pkg, require, character.only = TRUE)#
#remotes::install_github("khabbazian/sparseAHC")
#set num cores
numcores = 10
#set wd and read our shit
setwd('~/Projects/MOVE/td_je_angam_2022/data/')
fst_by_site = read.csv('fst_betweensites.csv')
metadata = read.csv('../metadata/sequenced_metadata.csv')
#metadata subset to latlong
lalo = metadata[c('Site', 'long', 'Lat')]
#double join here (joins metadata to both sides of fst data (site a and site b))
fst_loc = merge(
x = merge(x=fst_by_site,
y=lalo,
by.x="site_a",
by.y="Site")[],
y=lalo,
by.x="site_b",
by.y = 'Site'
)[]
fst_loc = unique(fst_loc)
#make point dist between coords
fst_loc$pointdist = distVincentyEllipsoid(s[,c('Lat.x','long.x')], s[,c('Lat.y','long.y')])
#make point dist between coords
fst_loc$pointdist = distVincentyEllipsoid(fst_loc[,c('Lat.x','long.x')], fst_loc[,c('Lat.y','long.y')])
fst_loc$Form = fst_loc$form_a
#create a vector of sites/form that have N >= 8 (arbitrarily chosen)
filtsites = data.table(metadata)[, .N, by=.(Form, Site)][ N >= 5 ]
#create id list for filtering
site_filt_vec = paste0(filtsites$Site, '_', filtsites$Form)
fst_loc$ida = paste0(fst_loc$site_a, '_', fst_loc$Form)
fst_loc$idb = paste0(fst_loc$site_b, '_', fst_loc$Form)
x = subset(fst_loc, idb %in% site_filt_vec)
y = subset(x, ida %in% site_filt_vec)
t = unique(y)
t %>% select(site_a, site_b, weighted_fst) %>%  pivot_wider(names_from = site_b, values_from = weighted_fst)
ggplot(t, aes(x=pointdist, y=weighted_fst))+
geom_point()+
facet_wrap(~Form)
#create a vector of sites/form that have N >= 8 (arbitrarily chosen)
filtsites = data.table(metadata)[, .N, by=.(Form, Site)][ N >= 5 ]
#create id list for filtering
site_filt_vec = paste0(filtsites$Site, '_', filtsites$Form)
fst_loc$ida = paste0(fst_loc$site_a, '_', fst_loc$Form)
fst_loc$idb = paste0(fst_loc$site_b, '_', fst_loc$Form)
x = subset(fst_loc, idb %in% site_filt_vec)
y = subset(x, ida %in% site_filt_vec)
t = unique(y)
t %>% select(site_a, site_b, weighted_fst) %>%  pivot_wider(names_from = site_b, values_from = weighted_fst)
#function taking ngsrelate output from above and performing ibd test
do_ibd_test <- function(relframe, form) {
relframe = relframe %>% filter(Form.x == form)
relframe[is.na(relframe)] <- 0 #get rid of annoying na = 0
x = as.dist(xtabs(relframe$KING ~ relframe$ID.x + relframe$ID.y))
y = as.dist(xtabs(relframe$dist ~ relframe$ID.x + relframe$ID.y))
#coerce and get rid of rownames
s = as.matrix(x)
t = as.matrix(y)
ibd = mantel.randtest(as.dist(s), as.dist(t), nrepet = 999)
return(ibd)
}
metadata[c('Site', 'Lat', 'long'),]
length(t$site_a)
length(t$site_b)
ggplot(t, aes(x=pointdist, y=weighted_fst))+
geom_point()+
facet_wrap(~Form)
ggplot(t, aes(x=pointdist, y=weighted_fst))+
geom_point()+
facet_wrap(~Form)+
theme_minimal()
ggplot(t, aes(x=pointdist, y=weighted_fst))+
geom_point()+
facet_wrap(~Form)+
theme_minimal()+
labs(x='Point Distance', 'Fst')
ggplot(t, aes(x=pointdist, y=weighted_fst))+
geom_point()+
facet_wrap(~Form)+
theme_minimal()+
labs(x='Point Distance', y='Fst')
View(fst_loc)
x = subset(fst_loc, idb %in% site_filt_vec)
y = subset(x, ida %in% site_filt_vec)
t = unique(y)
y
y[c('site_a', 'site_b', 'weighted_fst'),]
as.data.frame(y)[c('site_a', 'site_b', 'weighted_fst'),]
t %>% select(site_a, site_b, weighted_fst) %>%  pivot_wider(names_from = site_b, values_from = weighted_fst)
View(y)
y[complete.cases(y), ]
y = y[complete.cases(y), ]
as.dist(xtabs(y$weighted_fst ~ y$site_a + y$site_b))
y
y[y$form == 'M',]
y[y$form = 'M',]
y[y$form == c('M'),]
y[y$Form == c('M'),]
formspec = y[y$Form == c('M'),]
#create fst dist mat
as.dist(xtabs(formspec$weighted_fst ~ formspec$site_a + formspec$site_b))
#create fst dist mat
pdistmat = as.dist(xtabs(formspec$weighted_fst ~ formspec$site_a + formspec$site_b))
#create fst dist mat
fstdistmat = as.dist(xtabs(formspec$weighted_fst ~ formspec$site_a + formspec$site_b))
pdistmat = as.dist(xtabs(formspec$pointdist ~ formspec$site_a + formspec$site_b))
#create fst dist mat
fstdistmat = as.matrix(as.dist(xtabs(formspec$weighted_fst ~ formspec$site_a + formspec$site_b)))
pdistmat = as.matrix(as.dist(xtabs(formspec$pointdist ~ formspec$site_a + formspec$site_b)))
#create fst dist mat
as.dist(xtabs(formspec$weighted_fst ~ formspec$site_a + formspec$site_b))
#create fst dist mat
fstdistmat = as.dist(xtabs(formspec$weighted_fst ~ formspec$site_a + formspec$site_b))
pdistmat = as.dist(xtabs(formspec$pointdist ~ formspec$site_a + formspec$site_b))
ibd = mantel.randtest(as.dist(s), as.dist(t), nrepet = 999)
pkg = c('tidyverse', 'geosphere', 'data.table', 'qqman' ,'cowplot', 'parallel', 'Rcpp', 'RColorBrewer', 'UpSetR', 'sparseAHC', 'adegenet')
#install.packages(pkg) #install packages if you need them and load
new.packages <- pkg[!(pkg %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
lapply(pkg, require, character.only = TRUE)#
#remotes::install_github("khabbazian/sparseAHC")
#set num cores
numcores = 10
#set wd and read our shit
setwd('~/Projects/MOVE/td_je_angam_2022/data/')
fst_by_site = read.csv('fst_betweensites.csv')
metadata = read.csv('../metadata/sequenced_metadata.csv')
ibd = mantel.randtest(as.dist(s), as.dist(t), nrepet = 999)
#create fst dist mat
fstdistmat = as.matrix(as.dist(xtabs(formspec$weighted_fst ~ formspec$site_a + formspec$site_b)))
pdistmat = as.matrix(as.dist(xtabs(formspec$pointdist ~ formspec$site_a + formspec$site_b)))
ibd = mantel.randtest(as.dist(s), as.dist(t), nrepet = 999)
View(pdistmat)
ibd = mantel.randtest(as.dist(fstdistmat), as.dist(pdistmat), nrepet = 999)
ibd
formspec = y[y$Form == c('S'),]
#create fst dist mat
fstdistmat = as.matrix(as.dist(xtabs(formspec$weighted_fst ~ formspec$site_a + formspec$site_b)))
pdistmat = as.matrix(as.dist(xtabs(formspec$pointdist ~ formspec$site_a + formspec$site_b)))
ibd = mantel.randtest(as.dist(fstdistmat), as.dist(pdistmat), nrepet = 999)
ibd
#create a vector of sites/form that have N >= 8 (arbitrarily chosen)
filtsites = data.table(metadata)[, .N, by=.(Form, Site)][ N >= 8 ]
#create id list for filtering
site_filt_vec = paste0(filtsites$Site, '_', filtsites$Form)
fst_loc$ida = paste0(fst_loc$site_a, '_', fst_loc$Form)
fst_loc$idb = paste0(fst_loc$site_b, '_', fst_loc$Form)
#filter based on above
x = subset(fst_loc, idb %in% site_filt_vec)
y = subset(x, ida %in% site_filt_vec)
y = y[complete.cases(y), ]
formspec = y[y$Form == c('S'),]
#create fst dist mat
fstdistmat = as.matrix(as.dist(xtabs(formspec$weighted_fst ~ formspec$site_a + formspec$site_b)))
pdistmat = as.matrix(as.dist(xtabs(formspec$pointdist ~ formspec$site_a + formspec$site_b)))
ibd = mantel.randtest(as.dist(fstdistmat), as.dist(pdistmat), nrepet = 999)
ibd
#create a vector of sites/form that have N >= 8 (arbitrarily chosen)
filtsites = data.table(metadata)[, .N, by=.(Form, Site)][ N >= 85 ]
#create a vector of sites/form that have N >= 8 (arbitrarily chosen)
filtsites = data.table(metadata)[, .N, by=.(Form, Site)][ N >= 85 ]
#create a vector of sites/form that have N >= 8 (arbitrarily chosen)
filtsites = data.table(metadata)[, .N, by=.(Form, Site)][ N >= 5 ]
View(filtsites)
pkg = c('tidyverse', 'geosphere', 'data.table', 'qqman' ,'cowplot', 'igraph', 'Rcpp', 'RColorBrewer', 'UpSetR', 'sparseAHC', 'adegenet')
?igraph
metadata$Site
unique(metadata$Site)
unique(metadata$Site, metadata$habitat)
metadata$Site, metadata$habitat
metadata[c('Site'),]
metadata['Site',]
metadata$Site
metadata %>% select(Site, Form)
metadata %>% select(Site, Form, habitat) %>% distinct()
vertices = metadata %>% select(Site, Form, habitat) %>% distinct()
edges = fst_loc %>% select(site_a, site_b, unweighted_fst)
edges = fst_loc %>% select(site_a, site_b, unweighted_fst, Form)
distances = fst_loc %>% select(site_a, site_b, unweighted_fst, Form)
sites = metadata %>% select(Site, Form, habitat) %>% distinct()
distances = fst_loc %>% select(site_a, site_b, unweighted_fst, Form)
g <- graph.data.frame(distances, directed=TRUE, vertices=sites)
sites
sites = metadata %>% select(Site, habitat) %>% distinct() #vertices
g <- graph.data.frame(distances, directed=TRUE, vertices=sites)
g
plot(g)
?graph_from_data_frame
#ls pkg
pkg = c("tidyverse", "cowplot", "RColorBrewer", "cowplot", "pheatmap")
#install.packages(pkg) #install packages if you need them and load
new.packages <- pkg[!(pkg %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
lapply(pkg, require, character.only = TRUE)#
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
mapstats = read.delim('../datasets/mlst/results/idxstats.txt', header=F)
colnames(mapstats) = c('sample_id', 'locus', 'length', 'mapped', 'unmapped')
mapstats$sample_id = sub("/[^/]+$", "", mapstats$sample_id)
mapstats$sample_id = sub("_[^_]+$", "", mapstats$sample_id)
#fix mapstats sample id
targstats <- read_delim('~/Projects/bactocap/datasets/mlst/metadata/target_stats.txt', delim = '\t')
metadata <- read_csv('../ancillary/metadata/mlst_metadata.csv')
metadata <- read_csv('../ancillary/metadata/mlst_metadata.csv')
mlstmapping <- read_csv('~/Projects/bactocap/datasets/mlst/metadata/mapstatstable_mlst.csv')
mlstmapping <- read_csv('~/Projects/bactocap/datasets/mlst/results/mapstatstable_mlst.csv')
mlstmapping <- fread('~/Projects/bactocap/datasets/mlst/results/mapstatstable_mlst.csv')
#fix mapstats sample id
targstats <- fread('~/Projects/bactocap/datasets/mlst/results/target_stats.txt', delim = '\t')
#fix mapstats sample id
targstats <- fread('~/Projects/bactocap/datasets/mlst/results/target_stats.txt')
#fix mapstats sample id
targstats <- fread('~/Projects/bactocap/datasets/mlst/results/target_stats.txt')
metadata <- fread('../ancillary/metadata/mlst_metadata.csv')
mapstatstable = mapstats %>% dplyr::select(sample_id, locus, mapped) %>% pivot_wider(names_from = 'sample_id', values_from = 'mapped')
View(mapstatstable)
mapstats = read.delim('../datasets/mlst/results/idxstats.txt', header=F)
#read our shit
metadata <- fread('mlst_metadata.csv') #read sample data
#setwd to source dir (w/data files too)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#separate the target column into organism, locus, type etc
new_tbl$target<-sub(":", "_", new_tbl$target)
#select sample composition from metadata and join to new_tbl
ud_tbl <- metadata %>% select(IDInBactocap, sample_composition) %>% left_join(., new_tbl, by = c("IDInBactocap" = "filename"))
View(metadata)
#make nice heatmap
pheatmap(mapstatstable,cluster_rows=FALSE, cluster_cols=FALSE, annotation_col = sample_annotations, annotation_row = target_annotations)
#join mapping stats to metadata
#inflates the metadata to contain one entry w/metadata per-target per-sample
dfb <- metadata %>%
left_join(mapstats, by = (c('IDInBactocap' = 'sample_id'))) %>%
left_join(targstats, by = c('locus' = 'locus_name')) %>%
select(-c(X1,PolyomicsList, BATCH))
#join mapping stats to metadata
#inflates the metadata to contain one entry w/metadata per-target per-sample
dfb <- metadata %>%
left_join(mapstats, by = (c('Sample' = 'sample_id'))) %>%
left_join(targstats, by = c('locus' = 'locus_name')) %>%
select(-c(X1,PolyomicsList, BATCH))
#join mapping stats to metadata
#inflates the metadata to contain one entry w/metadata per-target per-sample
dfb <- metadata %>%
left_join(mapstats, by = (c('IDInBactocap' = 'sample_id'))) %>%
left_join(targstats, by = c('locus' = 'locus_name')) %>%
select(-c(X1,PolyomicsList, BATCH))
#join mapping stats to metadata
#inflates the metadata to contain one entry w/metadata per-target per-sample
dfb <- metadata %>%
left_join(mapstats, by = (c('sample_id' = 'Sample'))) %>%
left_join(targstats, by = c('locus' = 'locus_name')) %>%
select(-c(X1,PolyomicsList, BATCH))
colnames(mapstats) = c('sample_id', 'locus', 'locus_length', 'mapped_reads', 'unmapped_reads')
#read our shit
metadata <- fread('mlst_metadata.csv') #read sample data
mapstats <- fread('idxstats.txt') #read long=form mapping data (no reads mapped/locus/sample)
colnames(mapstats) = c('sample_id', 'locus', 'locus_length', 'mapped_reads', 'unmapped_reads')
gsub("\\_.*","_ABC",mapstats$sample_id)
gsub("\\_.*","",mapstats$sample_id)
mapstats$sample_id = gsub("\\_.*","",mapstats$sample_id)
#join mapping stats to metadata
#inflates the metadata to contain one entry w/metadata per-target per-sample
dfb <- metadata %>%
left_join(mapstats, by = (c('IDInBactocap' = 'sample_id'))) %>%
left_join(targstats, by = c('locus' = 'locus_name')) %>%
select(-c(X1,PolyomicsList, BATCH))
#join mapping stats to metadata
#inflates the metadata to contain one entry w/metadata per-target per-sample
dfb <- metadata %>%
left_join(mapstats, by = (c('Sample' = 'sample_id'))) %>%
left_join(targstats, by = c('locus' = 'locus_name')) %>%
select(-c(X1,PolyomicsList, BATCH))
#add per-sample frac mapped and frac unmapped
dfc <- dfb %>%
group_by(IDInBactocap) %>%
summarise(total_mapped = sum(mapped_reads), total_reads = sum(mapped_reads, unmapped_reads), unmapped_total = sum(unmapped_reads)) %>%
mutate(frac_unmapped = unmapped_total/total_reads) %>%
mutate(frac_mapped = total_mapped/total_reads) %>%
left_join(., dfb)
