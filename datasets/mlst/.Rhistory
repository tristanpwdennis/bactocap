geom_sf(fill = "#fcfcf5") +
geom_sf(data = Ngorongoro, fill = NA, color = "red", size = 1) +
#geom_sf(data = lakes, colour = '#a6bddb', fill = '#a6bddb')
theme(panel.grid.major = element_line(color = gray(0.5), linetype = "dashed", size = 0.5), panel.background = element_rect(fill = "aliceblue"), axis.title.x=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank(), axis.title.y=element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank())
eastafrica
#plot nca with points
nca <- ggplot(data = world) +
geom_sf(fill = "#fcfcf5") +
geom_sf(data = Ngorongoro, fill = NA) +
geom_point(data = mapmetadata, aes(x = mapmetadata$long, y =mapmetadata$lat, color = Cluster), size = 1.5) +
scale_color_manual(values=c("#b3b3b3", "#d7191c", "#fdae61", "#abd9e9", "#2c7bb6")) +
geom_text_repel(data = subset(mapmetadata, Cluster == "C1" | Cluster == "C2" | Cluster == "C3" | Cluster == "C4"), aes(x = long, y = lat, label = carcass)) +
geom_sf(data = lakes, colour = '#a6bddb', fill = '#a6bddb') +
coord_sf(xlim = c(34.5, 36), ylim =c(-2.4, -3.8) , expand = FALSE) +
xlab("Longitude") + ylab("Latitude")
nca
#draw main plot
ggplot() +
draw_plot(nca) +
draw_plot(eastafrica, x = 0.1, y = 0.7, width = 0.3, height = 0.3)
#plot densely annotated supp map
supp <- ggplot(data = world) +
geom_sf(fill = "#fcfcf5") +
geom_sf(data = Ngorongoro, fill = NA) +
geom_point(data = mapmetadata, aes(x = mapmetadata$long, y =mapmetadata$lat, color = Cluster), size = 1.5) +
scale_color_manual(values=c("#b3b3b3", "#d7191c", "#fdae61", "#abd9e9", "#2c7bb6")) +
geom_text_repel(data = mapmetadata, aes(x = long, y = lat, label = carcass)) +
geom_sf(data = lakes, colour = '#a6bddb', fill = '#a6bddb') +
coord_sf(xlim = c(34.5, 36), ylim =c(-2.4, -3.8) , expand = FALSE) +
#cale_fill_viridis_c(trans = "sqrt", alpha = .4) +
annotation_scale(location = "bl", width_hint = 0.4) +
ggtitle("Sampling Sites", subtitle = "The Serengeti Conservation Area") +
xlab("Longitude") + ylab("Latitude")
#plot
supp
#############
#IBD test in adegenet
anthraxmsa = fasta2DNAbin('/Users/tristanpwdennis/Projects/anthrax_diversity/MSA_anthrax_final.afa')
anthraxmsa = DNAbin2genind(anthraxmsa)
s = cbind(metadata$sample_id, metadata$lat, metadata$long)
xy.list <- split(s, seq(nrow(s)))
dimnames(xy.list) = c('name', 'x', 'y')
strata(anthraxmsa) = xy.list
anthraxmsa@other = as.list(t)
anthraxmsa@other
nancycats@other
anthraxmsa@strata$V3
r = nancycats@other
t = data.matrix(s, rownames.force = s$V1)
#make up distmatrix
mat = as.matrix(mat)
rownames(mat) = mat[,1]
mat = mat[,-1]
s = lalo %>% select(idx, idy, ntdiff)
t = lalo %>% select(idx, idy, V10)
x = s
colnames(x) = c('idy', 'idx', 'ntdiff')
s = rbind(x, s)
y = t
colnames(y) = c('idy', 'idx', 'V10')
t = rbind(t, y)
s = pivot_wider(s, values_from = ntdiff, names_from = idx)
t = pivot_wider(t, values_from = V10, names_from = idx)
s[is.na(s)] <- 0
t[is.na(t)] <- 0
s = as.matrix(s)
t = as.matrix(t)
rownames(s) = s[,1]
rownames(t) = t[,1]
s = s[,-1]
t = t[,-1]
ibd = mantel.randtest(as.dist(s), as.dist(t), nrepet = 999)
plot(ibd)
lalo
lalo %>% filter(clade.x ==1) %>% filter(clade.y ==1)
s = lalo %>% filter(clade.x ==1) %>% filter(clade.y ==1) select(idx, idy, ntdiff)
t = lalo %>% filter(clade.x ==1) %>% filter(clade.y ==1) select(idx, idy, V10)
x = s
s = lalo %>% filter(clade.x ==1) %>% filter(clade.y ==1) %>% select(idx, idy, ntdiff)
t = lalo %>% filter(clade.x ==1) %>% filter(clade.y ==1) %>% select(idx, idy, V10)
x = s
colnames(x) = c('idy', 'idx', 'ntdiff')
s = rbind(x, s)
y = t
colnames(y) = c('idy', 'idx', 'V10')
t = rbind(t, y)
s = pivot_wider(s, values_from = ntdiff, names_from = idx)
t = pivot_wider(t, values_from = V10, names_from = idx)
s[is.na(s)] <- 0
t[is.na(t)] <- 0
s = as.matrix(s)
t = as.matrix(t)
rownames(s) = s[,1]
rownames(t) = t[,1]
s = s[,-1]
t = t[,-1]
ibd = mantel.randtest(as.dist(s), as.dist(t), nrepet = 999)
plot(ibd)
ibd
plot(ibd)
#Tristan Dennis, October 2020
##############################################################################################
###############################
#import packages
library(tidyverse)
library(sf)
library("rnaturalearth")
library("rnaturalearthdata")
library(RColorBrewer)
library(ggtree)
library(treeio)
library(cowplot)
library(adegenet)
#install.packages('adegenet')
#setwd
setwd('~/Projects/anthrax_diversity/anthrax_diversity/')
#read in data
metadata <- read.csv('data/metadata.csv', stringsAsFactors=FALSE, na.strings = c("", "NA"))
#read in distance matrix and convert to pairwise obcservations vs matrix
mat <- read.delim('data/MSA_Banthracis_75samples_withGapsAndNs.distmatrix.txt', check.names=FALSE)
#force lat long to numeric
metadata$long <- as.numeric(metadata$long)
metadata$lat <- as.numeric(metadata$lat)
#############################################################################################
### Turning distance matrix into within/between scale comparisons for plotting and
### analysis
#############################################################################################
#################
#create indexed observations from matrix top triangle
test <- as.matrix(mat, labels=T)
#define rownames
rownames(test) <- mat[,1]
#drop the column that became rownames
test <- test[,-1]
#generate every combination of samples (in the colnames). paired
xy <- t(combn(colnames(test), 2))
#create dataframe by retrieving every value for each pair
inddist <- data.frame(xy, dist=test[xy])
#coerce snp distances to numeric
inddist$dist <- as.numeric(inddist$dist)
#################
#rename columns and join metadata to lhs and rhs
t1 <- inddist %>%
rename(idx = `X1`, idy = X2, ntdiff = dist) %>%
left_join(., metadata, by = c("idx" = "sample_id")) %>%
left_join(., metadata, by = c("idy" = "sample_id"))
#################
#Create four columns - one for each scale
t2 <- t1 %>%
select(idx, idy, ntdiff, carcass.x, carcass.y, Cluster.x, Cluster.y, species.x, species.y, geog.x, geog.y) %>%
mutate(., epi = 'epi') %>%
mutate(., geog = 'geog') %>%
mutate(., carcass = 'carcass') %>%
mutate(., species = 'species')
#################
#Stack the four scale columns into one, duplicating the df four times
#then define the different scales of each comparison based on whether each level (carcass, epi, geog group and species) are the same or
#different
t3 <- t2 %>%
pivot_longer(c(carcass, geog, epi, species), names_to = "ascale") %>%
mutate(withinorbetween = case_when(
#subset to 'carcass' and evaluate whether an observation is being made between samples from the same, or different, carcasses
(ascale == 'carcass' & carcass.x == carcass.y) ~ 'Same Carcass',
(ascale == 'carcass' & carcass.x != carcass.y) ~ 'Different Carcasses',
#ditto for geographic group
(ascale == 'geog' & geog.x == geog.y) ~ 'Same Cluster',
(ascale == 'geog' & geog.x != geog.y) ~ 'Different Cluster',
#ditto for species
(ascale == 'species' & species.x == species.y) ~ 'Same Species',
(ascale == 'species' & species.x != species.y) ~ 'Different Species',
#ditto for epi cluster - note that for samples not in a cluster 'single case'
#anything between a single case:single case, clsutered case:single case, etc is 'dUnlinked'
#the d is because ggplot facets alphabetically which messes with my plotting - hacky, manual fix
(ascale == 'epi' & Cluster.x == Cluster.y & Cluster.x != 'Single case' & Cluster.y != 'Single Case') ~ 'Linked Cases',
(ascale == 'epi' & Cluster.x != Cluster.y | Cluster.x == 'Single case' | Cluster.y == 'Single case') ~ 'dUnlinked Cases'))
################
#Now we need to apply some filters
#filter out same:same observations - this isn't necessary as `combn` above only outputs
filt_t3 <-t3 # %>% filter(!(idx==idy))
#remove observations from epi clusters that are from the same carcass
filt_t4 <- filt_t3 %>% filter(!(ascale == 'epi' & carcass.x == carcass.y))
#unknown species:unknown species evaluates as spurious 'same species' - remove
filt_t4 <- filt_t4 %>% filter(!(ascale == 'species' & species.x == 'unknown' | species.y == 'unknown'))
################
#generate summary stats as three tables
#for each scale, across the nca, and distinct lineages from the same carcass
#for each 'scale' - within or between species, geog, epi, carcass
summarystatsfiltt4 <-filt_t4 %>%
select(withinorbetween, ntdiff) %>%
group_by(withinorbetween) %>%
summarise(Median = median(ntdiff), Mean = mean(ntdiff), Min = min(ntdiff), Max = max(ntdiff), Lower_Quartile = quantile(ntdiff, 0.25), Upper_Quartile = quantile(ntdiff, 0.75), IQR = IQR(ntdiff))
#across the whole isolate set
ncawide <- inddist %>%
summarise(Median = median(dist), Mean = mean(dist), Min = min(dist), Max = max(dist), Lower_Quartile = quantile(dist, 0.25), Upper_Quartile = quantile(dist, 0.75), IQR = IQR(dist)) %>%
mutate(withinorbetween = paste('NCA-wide comparisons'))
#distinct lineages (non-identical isolates) from the same carcass
distinct_carc <- filt_t4 %>%
filter(withinorbetween == 'Same Carcass' & ntdiff > 0) %>%
summarise(Median = median(ntdiff), Mean = mean(ntdiff), Min = min(ntdiff), Max = max(ntdiff), Lower_Quartile = quantile(ntdiff, 0.25), Upper_Quartile = quantile(ntdiff, 0.75), IQR = IQR(ntdiff)) %>%
mutate(withinorbetween = paste('Distinct Isolates from Same Carcass'))
#bind all 3 together
finalsummarystatstable <- rbind(summarystatsfiltt4, ncawide, distinct_carc)
################
#write to file - unfiltered df and filtered df, and summary stats
write_csv(t1, 'data/pairwise-observations-unfiltered.csv')
write_csv(filt_t4, 'data/pairwise-observations-filtered.csv')
write_csv(finalsummarystatstable, 'data/summarystatstfromfiltered.csv')
carchist <- filt_t4 %>% filter(ascale == 'Carcass' & withinorbetween == 'Same Carcass') %>%
ggplot(aes(x=ntdiff)) +
geom_histogram(binwidth =1) +
theme_minimal() +
xlab("Nucleotide differences") +
ylab("Count")
ggsave("histogram_carcass_ntdiff.pdf", plot = carchist, device = 'pdf', path = "figures/")
carchist
carchist <- filt_t4 %>% filter(ascale == 'Carcass' & withinorbetween == 'Same Carcass') %>%
ggplot(aes(x=ntdiff)) +
geom_histogram(binwidth =1) +
theme_minimal() +
xlab("Nucleotide differences") +
ylab("Count")
carchist
#########
#histogram of disdtance within carcass
filt_t4
View(filt_t4)
View(filt_t3)
#distinct lineages (non-identical isolates) from the same carcass
distinct_carc <- filt_t4 %>%
filter(withinorbetween == 'Same Carcass' & ntdiff > 0) %>%
summarise(Median = median(ntdiff), Mean = mean(ntdiff), Min = min(ntdiff), Max = max(ntdiff), Lower_Quartile = quantile(ntdiff, 0.25), Upper_Quartile = quantile(ntdiff, 0.75), IQR = IQR(ntdiff)) %>%
mutate(withinorbetween = paste('Distinct Isolates from Same Carcass'))
distinct_carc
filt_t4 %>%
filter(withinorbetween == 'Same Carcass' & ntdiff > 0)
filt_t4 %>%
filter(withinorbetween == 'Same Carcass' & ntdiff > 0) %>% ggplot(aes(x=ntdiff))+geom_histogram()
filt_t4 %>%
filter(withinorbetween == 'Same Carcass' & ntdiff > 0) %>% ggplot(aes(x=ntdiff))+geom_histogram()+theme_minimal()
filt_t4 %>%
filter(withinorbetween == 'Same Carcass') %>% ggplot(aes(x=ntdiff))+geom_histogram()+theme_minimal()
filt_t4 %>%
filter(withinorbetween == 'Same Carcass') %>% ggplot(aes(x=ntdiff))+geom_histogram(binwidth = 1)+theme_minimal()
filt_t4 %>%
filter(withinorbetween == 'Same Carcass') %>% ggplot(aes(x=ntdiff))+geom_histogram(binwidth = 0.5)+theme_minimal()
filt_t4 %>%
filter(withinorbetween == 'Same Carcass') %>% ggplot(aes(x=ntdiff))+geom_histogram(binwidth = 0.05)+theme_minimal()
filt_t4 %>%
filter(withinorbetween == 'Same Carcass') %>% ggplot(aes(x=ntdiff))+geom_histogram(binwidth = 0.5)+theme_minimal()
s = filt_t4 %>%
filter(withinorbetween == 'Same Carcass') %>% ggplot(aes(x=ntdiff))+geom_histogram(binwidth = 0.5)+theme_minimal()
hist(s$ntdiff)
View(s)
View(s)
s = filt_t4 %>%
filter(withinorbetween == 'Same Carcass')
hist(s$ntdiff)
hist(s$ntdiff, bins=100)
hist(s$ntdiff, bins=50)
hist(s$ntdiff, bins=1)
hist(s$ntdiff, breaks = 1)
hist(s$ntdiff, breaks = 100)
#read in data
metadata <- read.csv('data/metadata.csv', stringsAsFactors=FALSE, na.strings = c("", "NA"))
#################
#Stack the four scale columns into one, duplicating the df four times
#then define the different scales of each comparison based on whether each level (carcass, epi, geog group and species) are the same or
#different
t3 <- t2 %>%
pivot_longer(c(carcass, geog, epi, species), names_to = "ascale") %>%
mutate(withinorbetween = case_when(
#subset to 'carcass' and evaluate whether an observation is being made between samples from the same, or different, carcasses
(ascale == 'carcass' & carcass.x == carcass.y) ~ 'Same Carcass',
(ascale == 'carcass' & carcass.x != carcass.y) ~ 'Different Carcasses',
#ditto for geographic group
(ascale == 'geog' & geog.x == geog.y) ~ 'Same Cluster',
(ascale == 'geog' & geog.x != geog.y) ~ 'Different Cluster',
#ditto for species
(ascale == 'species' & species.x == species.y) ~ 'Same Species',
(ascale == 'species' & species.x != species.y) ~ 'Different Species',
#ditto for epi cluster - note that for samples not in a cluster 'single case'
#anything between a single case:single case, clsutered case:single case, etc is 'dUnlinked'
#the d is because ggplot facets alphabetically which messes with my plotting - hacky, manual fix
(ascale == 'epi' & Cluster.x == Cluster.y & Cluster.x != 'Single case' & Cluster.y != 'Single Case') ~ 'Linked Cases',
(ascale == 'epi' & Cluster.x != Cluster.y | Cluster.x == 'Single case' | Cluster.y == 'Single case') ~ 'dUnlinked Cases'))
View(t3)
################
#Now we need to apply some filters
#filter out same:same observations - this isn't necessary as `combn` above only outputs
filt_t3 <-t3 # %>% filter(!(idx==idy))
#remove observations from epi clusters that are from the same carcass
filt_t4 <- filt_t3 %>% filter(!(ascale == 'epi' & carcass.x == carcass.y))
#unknown species:unknown species evaluates as spurious 'same species' - remove
filt_t4 <- filt_t4 %>% filter(!(ascale == 'species' & species.x == 'unknown' | species.y == 'unknown'))
View(filt_t4)
################
#Now we need to apply some filters
#filter out same:same observations - this isn't necessary as `combn` above only outputs
filt_t3 <-t3 # %>% filter(!(idx==idy))
t3 %>% select(ascale == 'Carcass')
t3 %>% filter(ascale == 'Carcass')
t3 %>% filter(ascale == 'Carcass')
t3 %>% filter(ascale == 'carcass')
t3 %>% filter(withinorbetween == 'Same Carcass')
t3 %>% filter(withinorbetween == 'Same Carcass') %>% ggplot(aes(x=ntdiff))+geom_histogram()
s = t3 %>% filter(withinorbetween == 'Same Carcass')
View(s)
t3 %>% filter(withinorbetween == 'Same Carcass') %>% ggplot(aes(x=ntdiff))+geom_histogram(binwidth = 1) + theme_minimal()
#ls pkg
pkg = c("tidyverse", "data.table", "sjPlot", "cowplot", "RColorBrewer", "MASS", "cowplot", "DHARMa", "interactions", "jtools")
#install.packages(pkg) #install packages if you need them and load
new.packages <- pkg[!(pkg %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
lapply(pkg, require, character.only = TRUE)#
#func to read csvs and take filename as a column
read_plus <- function(flnm) {
read_csv(flnm) %>%
mutate(filename = basename(flnm))
}
m0 <- glm(data=mdata, frac_mapped ~ inapool, family=binomial(link="logit"))
m1 <- glm(data=mdata, frac_mapped ~ organism*max_ct, family=binomial(link="logit"))
anthrax_dir <- c("~/Projects/bactocap/datasets/anthrax/results/")
myco_dir <- c("~/Projects/bactocap/datasets/mycoplasma/results/")
mlst_dir <- c("~/Projects/bactocap/datasets/mlst/results/")
dirs <- c(anthrax_dir, myco_dir)
new_tbl <- NULL
for (dir in dirs){
tbl <- list.files(path = dir,pattern = ".sample_interval_statistics", full.names = T) %>%
map_df(~read_plus(.))
tbl$organism = paste0(dir)
new_tbl <- rbind(new_tbl, tbl)
}
#replace gatk's gubbins from the header
colnames(new_tbl) <- str_replace(colnames(new_tbl), "depth>=", "")
#remove useless column (Number of Sources)
new_tbl = dplyr::select(new_tbl, -c(Number_of_sources))
new_tbl$filename <- str_replace(new_tbl$filename, ".sample_interval_statistics", "")
new_tbl$organism <- str_replace(new_tbl$organism, "~/Projects/bactocap/datasets/", "")
new_tbl$organism <- str_replace(new_tbl$organism, "/results/", "")
#pivot into longer
new_tbl <- new_tbl %>% pivot_longer(cols = c(0:501))
new_tbl$frac <- fifelse(new_tbl$organism == 'mycoplasma', new_tbl$value/24444, new_tbl$value/148729)
new_tbl$name <- as.numeric(new_tbl$name)
new_tbl$name <- as.numeric(new_tbl$name)
new_tbl %>% ggplot(aes(x=name, y=frac, colour =filename)) +
geom_line()+
theme_minimal() +
facet_wrap(~organism) +
theme(legend.position = "none") +
labs(x="Depth-of-Coverage", y="Proportion of Baited Genome")
################
#let's take a look at our metadata
tb1 <- left_join(sum_tbl, metadata, by = c('sample_id'='polyom_id'))
total_tbl <- left_join(tb1, mappingdata, by = c('sample_id'='sample_id'))
sum_tbl <- NULL
for (dir in dirs){
tbl <- list.files(path = dir,pattern = ".sample_summary", full.names = T) %>%
map_df(~read_plus(.)) %>% filter(sample_id != "Total")
tbl$organism = paste0(dir)
sum_tbl <- rbind(sum_tbl, tbl)
}
sum_tbl$filename <- str_replace(sum_tbl$filename, ".sample_summary", "")
sum_tbl$organism <- str_replace(sum_tbl$organism, "~/Projects/bactocap/datasets/", "")
sum_tbl$organism <- str_replace(sum_tbl$organism, "/results/", "")
metadata <- rbind(read.csv("~/Projects/bactocap/metadata/anthrax-metadata.csv") %>% mutate(organism = 'anthrax'),
read.csv("~/Projects/bactocap/metadata/mycoplasma-metadata.csv") %>% mutate(organism = 'mycoplasma'))
mappingdata  <- rbind(read.csv("~/Projects/bactocap/datasets/mycoplasma/results/myco_mapping.csv") %>% mutate(organism = 'mycoplasma'),
read.csv("~/Projects/bactocap/datasets/anthrax/results/anth_mapping.csv") %>% mutate(organism = 'anthrax'))
tlf_mdata = read.csv('~/Projects/bactocap/ancillary/metadata/anthrax-metadata-ud1.csv')
metadata = metadata %>% left_join(tlf_mdata %>% dplyr::select(sample_id, lp_amp_cycles, bc_amp_cycles) )
################
#let's take a look at our metadata
tb1 <- left_join(sum_tbl, metadata, by = c('sample_id'='polyom_id'))
total_tbl <- left_join(tb1, mappingdata, by = c('sample_id'='sample_id'))
total_tbl <- total_tbl %>% mutate(frac_mapped = mapped/total.y)
total_tbl$sample_conc <- as.numeric(total_tbl$sample_conc)
total_tbl$`%_bases_above_15` <- as.numeric(total_tbl$`%_bases_above_15`)
write_csv(total_tbl, "~/Projects/bactocap-data/Manuscript/anthmycototal.csv")
#plot mean_d_o_c
meandoc <- sum_tbl %>%
ggplot(aes(x = organism, y=mean, fill=organism)) +
geom_boxplot(width = 0.5, alpha = 0.7) +
geom_jitter(width = 0.1, alpha = 0.5) +
scale_fill_manual(values=c("deepskyblue1", "darkorange")) +
theme_minimal() +
theme(legend.position = "none") +
ylab("Mean Depth-of-Coverage") +
xlab("Organism")
meandoc
#bases above 15
abovefifteen<- total_tbl %>%
ggplot(aes(x = organism, y=`%_bases_above_15`, fill=organism)) +
geom_boxplot(width = 0.5, alpha = 0.7) +
geom_jitter(width = 0.1, alpha=0.5) +
scale_fill_manual(values=c("deepskyblue1", "darkorange")) +
theme_minimal() +
theme(legend.position = "none") +
ylab("Proportion Above 15X") +
xlab("Organism")
#duplicates
duplicates <- total_tbl %>%
ggplot(aes(x = organism, y=duplicates/total.x, fill=organism)) +
geom_boxplot(width = 0.5, alpha = 0.7) +
geom_jitter(width = 0.1, alpha=0.5) +
scale_fill_manual(values=c("deepskyblue1", "darkorange")) +
theme_minimal() +
ylim(0,0.3) +
theme(legend.position = "none") +
ylab("Proportion Duplicates") +
xlab("Organism")
plot_grid(
duplicates, meandoc, abovefifteen, NULL,
labels = c("A", "B", "C"), ncol = 2
)
#duplicates
d0 <- MASS::glm.nb(data=total_tbl, duplicates ~ max_ct)
d1 <- MASS::glm.nb(data=total_tbl, duplicates ~ organism*max_ct)
summary(d1)
summary(d0)
#fit a model to frac_mapped  (Jess says this is basically logistic regression)
m0 <- glm(data=total_tbl, frac_mapped ~ max_ct, family=binomial(link="logit"))
m1 <- glm(data=total_tbl, frac_mapped ~ organism*max_ct, family=binomial(link="logit"))
m2 <- glm(data=total_tbl, frac_mapped ~ organism+max_ct, family=binomial(link="logit"))
m3 <- glm(data=total_tbl, frac_mapped ~ organism*I(max_ct^2), family=binomial(link="logit"))
m4 <- glm(data=total_tbl, frac_mapped ~ organism*max_ct*cap_lib_conc, family=binomial(link="logit"))
m5 <- glm(data=total_tbl, frac_mapped ~ organism*max_ct+cap_lib_conc, family=binomial(link="logit"))
summary(m0)
summary(m1)
summary(m2)
summary(m3)
summary(m4)
summary(m5)
#plot the data and model predictions
fracmapped = interactions::interact_plot(m1, pred = max_ct, modx = 'organism', interval = TRUE, plot.points = TRUE, line.thickness = 0.5)
m0 <- MASS::glm.nb(data=total_tbl, mapped ~ max_ct)
#looks like the model is not fitting very well to the anthrax data (underestimating the lower ct and overestimating at the higher ct)
fracmapped
c0 = MASS::glm.nb(data = total_tbl, duplicates ~ lp_amp_cycles)
summary(c0)
c0 = MASS::glm.nb(data = total_tbl, fracmapped ~ lp_amp_cycles)
c0 = MASS::glm.nb(data = total_tbl, total_tbl$frac_mapped ~ lp_amp_cycles)
summary(c0)
c0 = MASS::glm.nb(data = total_tbl, total_mapped ~ lp_amp_cycles)
c0 = MASS::glm.nb(data = total_tbl, total ~ lp_amp_cycles)
total_tbl$total.x
c0 = MASS::glm.nb(data = total_tbl, total.x ~ lp_amp_cycles)
c0
summary(c0)
c0 = MASS::glm.nb(data = total_tbl, total.x ~ as.factor(lp_amp_cycles))
summary(c0)
c0 = MASS::glm.nb(data = total_tbl, total.x ~ as.factor(lp_amp_cycles), family=binomial(link="logit")))
c0 = MASS::glm.nb(data = total_tbl, total.x ~ as.factor(lp_amp_cycles), family=binomial(link="logit"))
c0 = glm(data = total_tbl, total.x ~ as.factor(lp_amp_cycles), family=binomial(link="logit"))
atable = total_tbl %>% filter(organism == 'anthrax')
y0 <- MASS::glm.nb(data=atable, mapped ~ max_ct)
y1 <- MASS::glm.nb(data=atable, mapped ~ max_ct+as.factor(bc_amp_cycles))
summary(y1)
y1 <- MASS::glm.nb(data=atable, mapped ~ max_ct*as.factor(bc_amp_cycles))
summary(y1)
y1 <- MASS::glm.nb(data=atable, mapped ~ max_ct + as.factor(bc_amp_cycles))
summary(y1)
interactions::interact_plot(ty, pred = max_ct, modx = 'lp_amp_cycles', interval = TRUE, plot.points = TRUE, line.thickness = 0.5)
interactions::interact_plot(y1, pred = max_ct, modx = 'lp_amp_cycles', interval = TRUE, plot.points = TRUE, line.thickness = 0.5)
plot(y1)
?jtools::effect_plot
jtools::effect_plot(y1)
y1 <- MASS::glm.nb(data=atable, mapped ~ max_ct + as.factor(bc_amp_cycles))
summary(y1)
y1 <- MASS::glm.nb(data=atable, mapped ~ as.factor(bc_amp_cycles))
summary(y1)
interactions::interact_plot(y1, pred = max_ct, modx = 'lp_amp_cycles', interval = TRUE, plot.points = TRUE, line.thickness = 0.5)
jtools::effect_plot(y1)
y1 <- MASS::glm.nb(data=atable, mapped ~ +max_ct +as.factor(bc_amp_cycles))
summary(y1)
atable
ggplot(atable, aeS(x=as.factor(bc_amp_cycles), y=mapped))
ggplot(atable, aes(x=as.factor(bc_amp_cycles), y=mapped))
ggplot(atable, aes(x=as.factor(bc_amp_cycles), y=mapped))+
geom_point()
ggplot(atable, aes(x=as.factor(bc_amp_cycles), y=mapped))+
geom_point()+
geom_jitter()+
interactions::interact_plot(y1, pred = max_ct, modx = 'lp_amp_cycles', interval = TRUE, plot.points = TRUE, line.thickness = 0.5)
ggplot(atable, aes(x=as.factor(bc_amp_cycles), y=mapped))+
geom_point()+
geom_jitter()
ggplot(atable, aes(x=as.factor(bc_amp_cycles), y=mapped))+
geom_jitter()
y1 <- MASS::glm.nb(data=atable, mapped ~ max_ct +as.factor(bc_amp_cycles))
summary(y1)
plot(y1)
y1 <- MASS::glm.nb(data=atable, mapped ~ as.factor(bc_amp_cycles))
summary(y1)
setwd('~/Projects/bactocap/datasets/mlst/')
mapstats <- read_delim('~/Projects/bactocap/ancillary/metadata/idxstats_udref.txt', delim = '\t')
mapstats$sample_id = sub("_[^_]+$", "", mapstats$sample_id) #fix mapstats sample id
targstats <- read_delim('~/Projects/bactocap/ancillary/metadata/targstats.txt', delim = '\t')
metadata <- read_delim('~/Projects/bactocap/ancillary/metadata/mlst_metadata.tsv', delim = '\t')
mlstmapping <- read_csv('~/Projects/bactocap/ancillary/metadata/mlst-mapping.csv')
mapstats <- read_delim('~/Projects/bactocap/ancillary/metadata/idxstats_udref.txt', delim = '\t')
setwd('~/Projects/bactocap/datasets/mlst/')
mapstats <- read_delim('~/Projects/bactocap/ancillary/metadata/idxstats_udref.txt', delim = '\t')
View(mapstats)
mapstats$sample_id = sub(".rg", "", mapstats$sample_id)
View(mapstats)
mapstats$sample_id = sub("_[^_]+$", "", mapstats$sample_id)
View(mapstats)
mapstatstable = mapstats %>% select(sample_id, locus, mapped_reads) %>% pivot_wider(names_from = 'sample_id', values_from = 'mapped_reads')
mapstatstable = mapstats %>% dplyr::select(sample_id, locus, mapped_reads) %>% pivot_wider(names_from = 'sample_id', values_from = 'mapped_reads')
write_csv(mapstatstable, "/Users/tristanpwdennis/Projects/bactocap/datasets/mlst/results/mapstatstable_mlst.csv")
View(mapstatstable)
View(mapstatstable)
